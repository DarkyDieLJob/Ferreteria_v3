# ==============================================
# IMPORTANTE: MÉTODO DE PRUEBAS PREFERIDO
# ==============================================
#
# Para ejecutar pruebas en este proyecto, utiliza el comando de gestión de Django:
#
#   python manage.py run_tests [opciones]
#
# Este comando garantiza que los resultados de las pruebas se guarden correctamente
# en la base de datos y estén disponibles en el dashboard de pruebas.
#
# Opciones disponibles:
#   --user=USERNAME     Especifica el usuario que ejecuta las pruebas
#   --test-path=PATH    Ruta al directorio o archivo de pruebas (opcional)
#   --coverage          Ejecutar con cobertura de código (activado por defecto)
#
# No uses 'pytest' directamente, ya que no registrará los resultados en el dashboard.
# ==============================================

# ==============================================================================
# ¡ADVERTENCIA! IMPORTANTE: NO USES 'pytest' DIRECTAMENTE
# ==============================================================================
#
# Este proyecto utiliza el comando personalizado 'run_tests' para ejecutar las
# pruebas, ya que garantiza:
# 1. Registro adecuado de resultados en el dashboard
# 2. Generación de reportes de cobertura consistentes
# 3. Configuración correcta del entorno de pruebas
#
# USO RECOMENDADO:
#   python manage.py run_tests [opciones]
#
# USO INCORRECTO:
#   pytest  # ¡NO HAGAS ESTO!
#
# ==============================================================================

[pytest]
# Configuración general de pytest
filterwarnings = ignore::DeprecationWarning
DJANGO_SETTINGS_MODULE = core_config.settings
python_files = tests.py test_*.py *_test.py
python_paths = .
testpaths = tests core_testing facturacion articulos

# Opciones de cobertura
addopts = 
    -v 
    --cov=.
    --cov-config=.coveragerc
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-branch
    --import-mode=importlib
    --rootdir=.
    --reuse-db
    --create-db
    --nomigrations
    --no-migrations
    --ds=core_config.settings
    --tb=short

# Configuración de logging
log_cli = true
log_cli_level = WARNING
log_cli_format = %(levelname)8s %(message)s
log_cli_date_format = %H:%M:%S
log_warning = 
    ===========================================================================
    ¡ADVERTENCIA: Estás ejecutando pytest directamente!
    
    Para ejecutar las pruebas correctamente, usa:
    
        python manage.py run_tests
        
    Esto asegurará que los resultados se registren correctamente en el dashboard
    y se generen los reportes necesarios.
    ===========================================================================

# Configuración de cobertura
[pytest-cov]
source = core_testing
omit = 
    */migrations/*
    */tests/*
    */testing_interfaces/*
    */__init__.py
    */admin.py
    */apps.py
    */urls.py
    */management/commands/*
    */templatetags/*
    */views/__init__.py
    */views/views_test.py
