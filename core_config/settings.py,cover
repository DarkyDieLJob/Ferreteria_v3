> """
> Django settings for core_config project.
  
> Generated by 'django-admin startproject' using Django 4.1.3.
  
> For more information on this file, see
> https://docs.djangoproject.com/en/4.1/topics/settings/
  
> For the full list of settings and their values, see
> https://docs.djangoproject.com/en/4.1/ref/settings/
> """
  
  
  #Mercado Pago
  #PAYMENT_HOST = 'https://localhost'
  #PAYMENT_MODEL = 'viejo.Payment'
  
> from ensurepip import bootstrap
> from pathlib import Path
> import os
> from .log_config import generate_app_logging_config
  
  
> os.environ['IP_BEW_SOCKET'] = 'ws://192.168.1.119:12000/ws'
  
  #################
  # para google ####################
  #################
  
> INBOX = '1JtiLUv_zYaYbGTAlUs_FHMNkzTs_cC5Y'
> PLANTILLAS = '1G-TtSaGhLa5-d_PnIbLqnz59henhngwo'
> DESCARGAR = '1MvOXlp1jhHZKgWaXpjmGphzBSyrj2a9F'
  
> IP_BEW_SOCKET = "ws://192.168.1.119:12000/ws"
  
  
  #######
  # Rutas ####################
  #######
  
  #Url Base
> ROOT_URLCONF = 'core_config.urls'
> LOGIN_REDIRECT_URL = '/'
  
  #Directorio Raiz
> BASE_DIR = Path(__file__).resolve().parent.parent
  
  
> LOGS_DIR_BASE = os.path.join(BASE_DIR, 'logs')
  
  # Asegúrate de que el directorio exista
> os.makedirs(LOGS_DIR_BASE, exist_ok=True)
  
  # Lista de aplicaciones para las que generar logs específicos
  # Usa los nombres que usarás con logging.getLogger() en tu código
  # Generalmente coincide con el nombre de la app en INSTALLED_APPS
> APPS_TO_LOG = [
>     'facturacion', 
>     'bdd', 
>     'actualizador',
>     ] # Añade aquí tus apps
  
  
  
  # --- Generar las configuraciones dinámicas ---
> generated_handlers, generated_loggers = generate_app_logging_config(APPS_TO_LOG, LOGS_DIR_BASE)
  
  # --- Configuración Principal de LOGGING ---
> LOGGING = {
>     'version': 1,
>     'disable_existing_loggers': False,
>     'formatters': {
>         'verbose': {
>             'format': '{levelname} {asctime} {name} {module} {process:d} {thread:d} {message}',
>             'style': '{',
>         },
>         'simple': {
>             'format': '{levelname} {message}',
>             'style': '{',
>         },
>     },
>     'handlers': {
          # Handlers comunes (no específicos de app)
>         'console_errors': {
>             'level': 'ERROR',
>             'class': 'logging.StreamHandler',
>             'formatter': 'simple',
>         },
          # Handler opcional para un debug.log general (si aún lo quieres para Django core o logs no categorizados)
>         'file_debug_general': {
>              'level': 'DEBUG',
>              'class': 'logging.handlers.RotatingFileHandler',
>              'filename': os.path.join(BASE_DIR, 'logs', 'django_debug.log'), # Archivo general
>              'maxBytes': 1024 * 1024 * 10,  # 10 MB
>              'backupCount': 3,
>              'formatter': 'verbose',
>              'encoding': 'utf-8',
>          },
          # Añadir los handlers generados dinámicamente
>         **generated_handlers, # Desempaqueta el diccionario aquí
>     },
>     'loggers': {
          # Logger raíz de Django - decide qué hacer con los logs del framework
>         'django': {
              # Puedes enviarlos al debug general y a la consola de errores
>             'handlers': ['file_debug_general', 'console_errors'],
              # Nivel base para Django core
>             'level': 'INFO', # O 'DEBUG' si necesitas mucho detalle del framework
>             'propagate': False, # Generalmente no quieres que los logs de Django core vayan a tus loggers de app
>         },
          # Logger para peticiones HTTP (puede ser muy verboso)
>         'django.request': {
>             'handlers': ['console_errors'], # O a un archivo específico si lo deseas
>             'level': 'ERROR', # Solo loguea errores de peticiones
>             'propagate': False, # No propagar a 'django'
>         },
          # Logger para consultas SQL (útil para debug de rendimiento)
>         'django.db.backends': {
>             'handlers': ['file_debug_general'], # O a consola, o a su propio archivo
>             'level': 'ERROR', # Cambia a DEBUG para ver todas las queries (¡muy verboso!)
>             'propagate': False,
>         },
  
          # Añadir los loggers generados dinámicamente para tus apps
>         **generated_loggers, # Desempaqueta el diccionario aquí
>     },
      # Puedes definir un logger 'raíz' para capturar todo lo no capturado explícitamente
      # 'root': {
      #     'handlers': ['file_debug_general', 'console_errors'],
      #     'level': 'WARNING', # O el nivel que consideres apropiado
      # }
> }
  #Directorio Media
> MEDIA_ROOT = os.path.join(BASE_DIR,'media')
  
> MEDIA_URL = '/media/'
  
  
  #Directorio estatico
> STATIC_ROOT_S = os.path.join(BASE_DIR, 'static')
> STATIC_URL = '/static/'
  
  
> STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
  
  
  #print(MEDIA_ROOT)
  #print(STATIC_ROOT)
  
  ###########
  # Seguridad #################
  ###########
  
  
> SECRET_KEY = 'django-insecure-5258*z#xf)z0f5bthv+xwa1v1n82(kmivxn1rd3l3ox6h8$s06'
  
> INTERNET = False
  # SECURITY WARNING: don't run with debug turned on in production!
> DEBUG = True
  
> ALLOWED_HOSTS = ['172.17.0.3','darkydiel.pythonanywhere.com','localhost', '192.168.0.15', '192.168.1.104','192.168.1.119', '192.168.0.9','192.168.0.231','10.0.2.2','127.0.0.1']
> ALLOWED_HOSTS = ['*']
  
> IMPORT_EXPORT_USE_TRANSACTIONS = True
  # Application definition
  
  
  ##############
  # Aplicaciones ###############
  ##############
  
> apps = [
>     'core_docs',
>     'core_andamios',
>     'core_index',
>     'core_elementos',
>     'x_widgets',
>     'x_articulos',
>     'x_cartel',
>     'bdd',
>     'crispy_forms',
>     'bootstrap4',
>     'crispy_bootstrap4',
>     'boletas',
>     'carga_archivo',
>     'facturacion',
>     'cajas',
>     'pedido',
>     'articulos',
>     'actualizador',
>     'utils',
> ]
  
> INSTALLED_APPS = [
      #'reactpy_django',
      #'daphne',
>     'django.contrib.admin',
>     'django.contrib.auth',
>     'django.contrib.contenttypes',
>     'django.contrib.sessions',
>     'django.contrib.messages',
>     'django.contrib.staticfiles',
>     'django.contrib.sites',
>     'django.contrib.admindocs',
>     'allauth',
>     'allauth.account',
>     'allauth.socialaccount',
>     'allauth.socialaccount.providers.google',
> ]
  
> INSTALLED_APPS += apps
  
> EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
  
> CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
  
> CRISPY_TEMPLATE_PACK = "bootstrap4"
  
> STATICFILES_FINDERS = [
      # ...
>     'django.contrib.staticfiles.finders.FileSystemFinder',
>     "django.contrib.staticfiles.finders.AppDirectoriesFinder",
      # ...
> ]
  
> MIDDLEWARE = [
>     'allauth.account.middleware.AccountMiddleware',
>     'django.middleware.security.SecurityMiddleware',
>     'django.contrib.sessions.middleware.SessionMiddleware',
>     'django.middleware.common.CommonMiddleware',
>     'django.middleware.csrf.CsrfViewMiddleware',
>     'django.contrib.auth.middleware.AuthenticationMiddleware',
>     'django.contrib.messages.middleware.MessageMiddleware',
>     'django.middleware.clickjacking.XFrameOptionsMiddleware',
> ]
  
> AUTHENTICATION_BACKENDS = [
>     'django.contrib.auth.backends.ModelBackend',
>     'allauth.account.auth_backends.AuthenticationBackend',
> ]
  
> ACCOUNT_AUTHENTICATION_METHOD = "email"
> ACCOUNT_EMAIL_REQUIRED = True
> ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
> ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
> ACCOUNT_LOGOUT_ON_GET = True
  
> SITE_ID = 1
  
> SOCIALACCOUNT_STORE_TOKENS = True
  
> SOCIALACCOUNT_PROVIDERS = {
>     'google': {
>         'SCOPE': [
>             'profile',
>             'email',
>             'https://www.googleapis.com/auth/userinfo.email',
>             'https://www.googleapis.com/auth/userinfo.profile',
>             'https://www.googleapis.com/auth/drive',
>             'https://www.googleapis.com/auth/drive.file',
>             'https://www.googleapis.com/auth/gmail.readonly',
>             'https://www.googleapis.com/auth/gmail.modify',
>             'https://www.googleapis.com/auth/gmail.compose'
>         ],
>         'AUTH_PARAMS': {
>             'access_type': 'offline',
>         },
>     }
> }
  
> TEMPLATES = [
>     {
>         'BACKEND': 'django.template.backends.django.DjangoTemplates',
>         'DIRS': [os.path.join(STATIC_ROOT_S, "templates")],
>         'APP_DIRS': True,
>         'OPTIONS': {
>             'context_processors': [
>                 'django.template.context_processors.debug',
>                 'django.template.context_processors.request',
>                 'django.contrib.auth.context_processors.auth',
>                 'django.contrib.messages.context_processors.messages',
>                 'core_andamios.context_processors.mi_procesador_de_contexto',
>             ],
>         },
>     },
> ]
  
> WSGI_APPLICATION = 'core_config.wsgi.application'
> ASGI_APPLICATION = 'core_config.asgi.application'
  
  
  # Database
  # https://docs.djangoproject.com/en/4.1/ref/settings/#databases
  
> DATABASES = {
>     'default': {
>         'ENGINE': 'django.db.backends.sqlite3',
>         'NAME': BASE_DIR / 'db.sqlite3',
>         'OPTIONS': {
>             'init_command': "PRAGMA journal_mode=WAL;",
>         }
>     }
> }
  
  
  # Password validation
  # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
  
> AUTH_PASSWORD_VALIDATORS = [
>     {
>         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
>     },
>     {
>         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
>     },
>     {
>         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
>     },
>     {
>         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
>     },
> ]
  
  
  # Internationalization
  # https://docs.djangoproject.com/en/4.1/topics/i18n/
  
> LANGUAGE_CODE = 'es-ar'
  
> TIME_ZONE = 'America/Argentina/Buenos_Aires'
  
> USE_I18N = True
  
> USE_TZ = True
  
  
  
  # Default primary key field type
  # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
  
> DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
  
> CELERY_BROKER_URL = 'amqp://guest:guest@0.0.0.0:5672//'
  
